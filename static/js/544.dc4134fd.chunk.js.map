{"version":3,"file":"static/js/544.dc4134fd.chunk.js","mappings":"kTAEMA,EAAM,mCACNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAS,mCAAG,oGACAH,EAAUI,IAAI,mBAAoB,CACvDC,OAAQ,CAAEC,QAASP,KAFE,cACjBQ,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAa,mCAAG,WAAMC,GAAN,uFACJV,EAAUI,IAAV,gBAAuBM,GAAM,CAClDL,OAAQ,CAAEC,QAASP,KAFM,cACrBQ,EADqB,yBAKpBA,GALoB,2CAAH,sDAQbI,EAAW,mCAAG,WAAMD,GAAN,uFACFV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFI,cACnBQ,EADmB,yBAKlBA,GALkB,2CAAH,sDAQXK,EAAc,mCAAG,WAAMF,GAAN,uFACLV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFO,cACtBQ,EADsB,yBAKrBA,GALqB,2CAAH,sDAQdM,EAAgB,mCAAG,WAAMC,GAAN,uFACPd,EAAUI,IAAI,eAAgB,CACnDC,OAAQ,CAAEC,QAASP,EAAKe,MAAAA,KAFI,cACxBP,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qD,uFCnChBO,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAMG,KAAI,SAAAC,GACT,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKV,IAAMY,MAAO,CAAEC,KAAMN,GAA/C,SACGG,EAAKI,OAASJ,EAAKK,MAAQL,EAAKM,kBAF5BN,EAAKV,GAMjB,KAGN,C,kICsBD,UAnCa,WACX,OAA0BiB,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IACE,IAAMI,EAAW,mCAAG,uGACK/B,EAAAA,EAAAA,MADL,UACZI,EADY,OAGI,KADhB4B,EAAS5B,EAAS6B,SACbC,OAHO,yCAITC,EAAAA,OAAAA,QAAe,+BAJN,OAMlBV,EAASO,GANS,2CAAH,qDAQjBD,GAMD,CALC,MAAOH,GACPC,GAAS,GACTO,QAAQR,MAAMA,EACf,CAbD,QAcED,GAAa,EACd,CACF,GAAE,KAGD,6BACE,wBAAI,mBACHd,EAAMqB,OAAS,IAAK,SAAC,IAAD,CAAUrB,MAAOA,IACrCa,IAAa,SAAC,IAAD,IACbE,IAAS,uBAAG,iCAGlB,C","sources":["API.js","components/FilmList/FilmList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '183c3cacc9c38c09c14d38798ccfe9d7';\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const getMovies = async () => {\n  const response = await moviesApi.get('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n};\n\nexport const getMoviesById = async id => {\n  const response = await moviesApi.get(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getCastById = async id => {\n  const response = await moviesApi.get(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getReviewsById = async id => {\n  const response = await moviesApi.get(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getSearhedMovies = async query => {\n  const response = await moviesApi.get('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n};\n\n//https://api.themoviedb.org/3/search/movie?query=batman\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films.map(film => {\n        return (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title || film.name || film.original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n      original_title: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getMovies } from 'API';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      const fetchMovies = async () => {\n        const response = await getMovies();\n        const movies = response.results;\n        if (movies.length === 0) {\n          return Notify.failure('Oops.. Simesing went wrong');\n        }\n        setFilms(movies);\n      };\n      fetchMovies();\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {films.length > 0 && <FilmList films={films} />}\n      {isLoading && <Loader />}\n      {error && <p>Oops.. Simesing went wrong</p>}\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["KEY","moviesApi","axios","baseURL","getMovies","get","params","api_key","response","data","getMoviesById","id","getCastById","getReviewsById","getSearhedMovies","query","FilmList","films","location","useLocation","map","film","to","state","from","title","name","original_title","useState","setFilms","isLoading","setIsLoading","error","setError","useEffect","fetchMovies","movies","results","length","Notify","console"],"sourceRoot":""}